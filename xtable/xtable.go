package xtable

// package xtable (extended table) is a clone of https://github.com/charmbracelet/bubbles/blob/master/table/table.go
// with some addtional features.
//
// - 	Row type is now a struct containing the row data ([]string) and metadata (interface{}), so you can store something like instance of the type that was used to construct the row.
// -	Additional methods

import (
	"errors"
	"fmt"
	"math"
	"reflect"
	"sort"
	"strconv"
	"strings"

	"github.com/charmbracelet/bubbles/help"
	"github.com/charmbracelet/bubbles/key"
	"github.com/charmbracelet/bubbles/viewport"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
	"github.com/mattn/go-runewidth"
)

// Metadata must be implemented by any metadata associated with a table row,
// usually the source data associated with the row.
type Metadata interface {

	// GetHashCode returns a unique hash for the row metadata.
	// It should remain constant for the lifetime of the table.
	// You can use something that implements the Hash64 interface to generate this
	GetHashCode() uint64
}

// Row represents one line in the table.
type Row struct {
	Data     []string
	Metadata Metadata
}

// Column defines the table structure.
type Column struct {
	Title string
	Width int
}

// Model defines a state for the table widget.
type Model struct {
	KeyMap KeyMap
	Help   help.Model

	cols       []Column
	rows       []Row
	cursor     int
	focus      bool
	styles     Styles
	rowNumbers bool

	viewport viewport.Model
	start    int
	end      int
}

// KeyMap defines keybindings. It satisfies to the help.KeyMap interface, which
// is used to render the help menu.
type KeyMap struct {
	LineUp       key.Binding
	LineDown     key.Binding
	PageUp       key.Binding
	PageDown     key.Binding
	HalfPageUp   key.Binding
	HalfPageDown key.Binding
	GotoTop      key.Binding
	GotoBottom   key.Binding
}

// ShortHelp implements the KeyMap interface.
func (km KeyMap) ShortHelp() []key.Binding {
	return []key.Binding{km.LineUp, km.LineDown}
}

// FullHelp implements the KeyMap interface.
func (km KeyMap) FullHelp() [][]key.Binding {
	return [][]key.Binding{
		{km.LineUp, km.LineDown, km.GotoTop, km.GotoBottom},
		{km.PageUp, km.PageDown, km.HalfPageUp, km.HalfPageDown},
	}
}

// DefaultKeyMap returns a default set of keybindings.
func DefaultKeyMap() KeyMap {
	const spacebar = " "
	return KeyMap{
		LineUp: key.NewBinding(
			key.WithKeys("up", "k"),
			key.WithHelp("↑/k", "up"),
		),
		LineDown: key.NewBinding(
			key.WithKeys("down", "j"),
			key.WithHelp("↓/j", "down"),
		),
		PageUp: key.NewBinding(
			key.WithKeys("b", "pgup"),
			key.WithHelp("b/pgup", "page up"),
		),
		PageDown: key.NewBinding(
			key.WithKeys("f", "pgdown", spacebar),
			key.WithHelp("f/pgdn", "page down"),
		),
		HalfPageUp: key.NewBinding(
			key.WithKeys("u", "ctrl+u"),
			key.WithHelp("u", "½ page up"),
		),
		HalfPageDown: key.NewBinding(
			key.WithKeys("d", "ctrl+d"),
			key.WithHelp("d", "½ page down"),
		),
		GotoTop: key.NewBinding(
			key.WithKeys("home", "g"),
			key.WithHelp("g/home", "go to start"),
		),
		GotoBottom: key.NewBinding(
			key.WithKeys("end", "G"),
			key.WithHelp("G/end", "go to end"),
		),
	}
}

// Styles contains style definitions for this list component. By default, these
// values are generated by DefaultStyles.
type Styles struct {
	Header   lipgloss.Style
	Cell     lipgloss.Style
	Selected lipgloss.Style
}

// DefaultStyles returns a set of default style definitions for this table.
func DefaultStyles() Styles {
	return Styles{
		Selected: lipgloss.NewStyle().Bold(true).Foreground(lipgloss.Color("212")),
		Header:   lipgloss.NewStyle().Bold(true).Padding(0, 1),
		Cell:     lipgloss.NewStyle().Padding(0, 1),
	}
}

// SetStyles sets the table styles.
func (m *Model) SetStyles(s Styles) {
	m.styles = s
	m.UpdateViewport()
}

// Option is used to set options in New. For example:
//
//	table := New(WithColumns([]Column{{Title: "ID", Width: 10}}))
type Option func(*Model)

// New creates a new model for the table widget.
func New(opts ...Option) Model {
	m := Model{
		cursor:   0,
		viewport: viewport.New(0, 20), //nolint:mnd

		KeyMap: DefaultKeyMap(),
		Help:   help.New(),
		styles: DefaultStyles(),
	}

	for _, opt := range opts {
		opt(&m)
	}

	if m.rowNumbers {
		m.addRowNumbers()
	}

	m.UpdateViewport()

	return m
}

// WithColumns sets the table columns (headers).
func WithColumns(cols []Column) Option {
	return func(m *Model) {
		m.cols = cols
	}
}

// WithRows sets the table rows (data).
func WithRows(rows []Row) Option {
	return func(m *Model) {
		m.rows = rows
	}
}

// WithStructData creates a table by reflecting a slice of structs implementing the Metadata interface.
//
//   - Column names are derived from struct field names or if present, the value of struct tag "xtable".
//   - Row data is converted to strings from the data in the slice.
//   - Row Metadata field is set to the values in the slice.
//   - All public struct fields are included, unless constrained by field names listed in `fields` argument.
//
// Panics if there is any error parsing the data from the slice, such as
//   - data is not a slice of structs
//   - slice element does not implement Metadata
func WithStructData(data interface{}, fields ...string) Option {
	return func(m *Model) {
		if c, r, err := renderTable(data, fields); err != nil {
			panic(fmt.Sprintf("Cannot render table: %s", err.Error()))
		} else {
			m.cols = c
			m.rows = r
		}
	}
}

// WithRowNumbers insetrs a column at postion zero containing row numbers.
func WithRowNumbers() Option {
	return func(m *Model) {
		m.rowNumbers = true
	}
}

// WithHeight sets the height of the table.
func WithHeight(h int) Option {
	return func(m *Model) {
		m.viewport.Height = h - lipgloss.Height(m.headersView())
	}
}

// WithWidth sets the width of the table.
func WithWidth(w int) Option {
	return func(m *Model) {
		m.viewport.Width = w
	}
}

// WithFocused sets the focus state of the table.
func WithFocused(f bool) Option {
	return func(m *Model) {
		m.focus = f
	}
}

// WithStyles sets the table styles.
func WithStyles(s Styles) Option {
	return func(m *Model) {
		m.styles = s
	}
}

// WithKeyMap sets the key map.
func WithKeyMap(km KeyMap) Option {
	return func(m *Model) {
		m.KeyMap = km
	}
}

// Update is the Bubble Tea update loop.
func (m Model) Update(msg tea.Msg) (Model, tea.Cmd) {
	if !m.focus {
		return m, nil
	}

	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch {
		case key.Matches(msg, m.KeyMap.LineUp):
			m.MoveUp(1)
		case key.Matches(msg, m.KeyMap.LineDown):
			m.MoveDown(1)
		case key.Matches(msg, m.KeyMap.PageUp):
			m.MoveUp(m.viewport.Height)
		case key.Matches(msg, m.KeyMap.PageDown):
			m.MoveDown(m.viewport.Height)
		case key.Matches(msg, m.KeyMap.HalfPageUp):
			m.MoveUp(m.viewport.Height / 2) //nolint:mnd
		case key.Matches(msg, m.KeyMap.HalfPageDown):
			m.MoveDown(m.viewport.Height / 2) //nolint:mnd
		case key.Matches(msg, m.KeyMap.GotoTop):
			m.GotoTop()
		case key.Matches(msg, m.KeyMap.GotoBottom):
			m.GotoBottom()
		}
	}

	return m, nil
}

// Focused returns the focus state of the table.
func (m Model) Focused() bool {
	return m.focus
}

// Focus focuses the table, allowing the user to move around the rows and
// interact.
func (m *Model) Focus() {
	m.focus = true
	m.UpdateViewport()
}

// Blur blurs the table, preventing selection or movement.
func (m *Model) Blur() {
	m.focus = false
	m.UpdateViewport()
}

// View renders the component.
func (m Model) View() string {
	return m.headersView() + "\n" + m.viewport.View()
}

// HelpView is a helper method for rendering the help menu from the keymap.
// Note that this view is not rendered by default and you must call it
// manually in your application, where applicable.
func (m Model) HelpView() string {
	return m.Help.View(m.KeyMap)
}

// UpdateViewport updates the list content based on the previously defined
// columns and rows.
func (m *Model) UpdateViewport() {
	renderedRows := make([]string, 0, len(m.rows))

	// Render only rows from: m.cursor-m.viewport.Height to: m.cursor+m.viewport.Height
	// Constant runtime, independent of number of rows in a table.
	// Limits the number of renderedRows to a maximum of 2*m.viewport.Height
	if m.cursor >= 0 {
		m.start = clamp(m.cursor-m.viewport.Height, 0, m.cursor)
	} else {
		m.start = 0
	}
	m.end = clamp(m.cursor+m.viewport.Height, m.cursor, len(m.rows))
	for i := m.start; i < m.end; i++ {
		renderedRows = append(renderedRows, m.renderRow(i))
	}

	m.viewport.SetContent(
		lipgloss.JoinVertical(lipgloss.Left, renderedRows...),
	)
}

// SelectedRow returns the selected row.
// You can cast it to your own implementation.
func (m Model) SelectedRow() Row {
	if m.cursor < 0 || m.cursor >= len(m.rows) {
		return Row{}
	}

	return m.rows[m.cursor]
}

// Rows returns the current rows.
func (m Model) Rows() []Row {
	return m.rows
}

// Columns returns the current columns.
func (m Model) Columns() []Column {
	return m.cols
}

// SetRows sets a new rows state.
func (m *Model) SetRows(r []Row) {
	m.rows = r
	m.UpdateViewport()
}

// SetColumns sets a new columns state.
func (m *Model) SetColumns(c []Column) {
	m.cols = c
	m.UpdateViewport()
}

// SetWidth sets the width of the viewport of the table.
func (m *Model) SetWidth(w int) {
	m.viewport.Width = w
	m.UpdateViewport()
}

// SetHeight sets the height of the viewport of the table.
func (m *Model) SetHeight(h int) {
	m.viewport.Height = h - lipgloss.Height(m.headersView())
	m.UpdateViewport()
}

// Height returns the viewport height of the table.
func (m Model) Height() int {
	return m.viewport.Height
}

// Width returns the viewport width of the table.
func (m Model) Width() int {
	return m.viewport.Width
}

// Cursor returns the index of the selected row.
func (m Model) Cursor() int {
	return m.cursor
}

// SetCursor sets the cursor position in the table.
func (m *Model) SetCursor(n int) {
	m.cursor = clamp(n, 0, len(m.rows)-1)
	m.UpdateViewport()
}

// MoveUp moves the selection up by any number of rows.
// It can not go above the first row.
func (m *Model) MoveUp(n int) {
	m.cursor = clamp(m.cursor-n, 0, len(m.rows)-1)
	switch {
	case m.start == 0:
		m.viewport.SetYOffset(clamp(m.viewport.YOffset, 0, m.cursor))
	case m.start < m.viewport.Height:
		m.viewport.YOffset = (clamp(clamp(m.viewport.YOffset+n, 0, m.cursor), 0, m.viewport.Height))
	case m.viewport.YOffset >= 1:
		m.viewport.YOffset = clamp(m.viewport.YOffset+n, 1, m.viewport.Height)
	}
	m.UpdateViewport()
}

// MoveDown moves the selection down by any number of rows.
// It can not go below the last row.
func (m *Model) MoveDown(n int) {
	m.cursor = clamp(m.cursor+n, 0, len(m.rows)-1)
	m.UpdateViewport()

	switch {
	case m.end == len(m.rows) && m.viewport.YOffset > 0:
		m.viewport.SetYOffset(clamp(m.viewport.YOffset-n, 1, m.viewport.Height))
	case m.cursor > (m.end-m.start)/2 && m.viewport.YOffset > 0:
		m.viewport.SetYOffset(clamp(m.viewport.YOffset-n, 1, m.cursor))
	case m.viewport.YOffset > 1:
	case m.cursor > m.viewport.YOffset+m.viewport.Height-1:
		m.viewport.SetYOffset(clamp(m.viewport.YOffset+1, 0, 1))
	}
}

// GotoTop moves the selection to the first row.
func (m *Model) GotoTop() {
	m.MoveUp(m.cursor)
}

// GotoBottom moves the selection to the last row.
func (m *Model) GotoBottom() {
	m.MoveDown(len(m.rows))
}

// FromValues create the table rows from a simple string. It uses `\n` by
// default for getting all the rows and the given separator for the fields on
// each row.
func (m *Model) FromValues(value, separator string) {
	rows := []Row{}
	for _, line := range strings.Split(value, "\n") {
		r := Row{
			Data: strings.Split(line, separator),
		}
		rows = append(rows, r)
	}

	m.SetRows(rows)
}

func (m Model) headersView() string {
	s := make([]string, 0, len(m.cols))
	for _, col := range m.cols {
		if col.Width <= 0 {
			continue
		}
		style := lipgloss.NewStyle().Width(col.Width).MaxWidth(col.Width).Inline(true)
		renderedCell := style.Render(runewidth.Truncate(col.Title, col.Width, "…"))
		s = append(s, m.styles.Header.Render(renderedCell))
	}
	return lipgloss.JoinHorizontal(lipgloss.Top, s...)
}

func (m *Model) renderRow(r int) string {
	s := make([]string, 0, len(m.cols))
	for i, value := range m.rows[r].Data {
		if m.cols[i].Width <= 0 {
			continue
		}
		style := lipgloss.NewStyle().Width(m.cols[i].Width).MaxWidth(m.cols[i].Width).Inline(true)
		renderedCell := m.styles.Cell.Render(style.Render(runewidth.Truncate(value, m.cols[i].Width, "…")))
		s = append(s, renderedCell)
	}

	row := lipgloss.JoinHorizontal(lipgloss.Top, s...)

	if r == m.cursor {
		return m.styles.Selected.Render(row)
	}

	return row
}

func max(a, b int) int {
	if a > b {
		return a
	}

	return b
}

func min(a, b int) int {
	if a < b {
		return a
	}

	return b
}

func clamp(v, low, high int) int {
	return min(max(v, low), high)
}

// BEGIN additional methods

// SelectedRowYOffset returns the offset in console lines of the selected row from the top of the viewport.
// If the top line is selected, this value is zero; if the second line is selected, the value is 1 etc.
func (m Model) SelectedRowYOffset() int {
	return m.cursor - m.start - m.viewport.YOffset
}

// RemoveSelectedRow removes the currently selected row. If no rows remain, this returns false.
func (m *Model) RemoveSelectedRow() bool {

	return m.RemoveRowByIndex(m.cursor)
}

// RemoveRowByHash removes the row identified by the metadata hash value. If no rows remain, this returns false.
func (m *Model) RemoveRowByHash(hashCode uint64) bool {
	ind := m.GetRowByHash(hashCode)

	if ind == -1 {
		return len(m.rows) > 0
	}

	return m.RemoveRowByIndex(ind)
}

// RemoveRow removes the row containing the given object as metadata
func (m *Model) RemoveRow(obj Metadata) bool {
	return m.RemoveRowByHash(obj.GetHashCode())
}

// RemoveRowByIndex removes the row at the given index. If no rows remain, this returns false.
func (m *Model) RemoveRowByIndex(index int) bool {

	if index > len(m.rows)-1 || index < 0 {
		return true
	}

	switch {
	case len(m.rows) <= 1:

		m.rows = []Row{}

	case index == 0:

		m.rows = m.rows[1:]

	case index == len(m.rows)-1:

		m.rows = m.rows[:len(m.rows)-1]

	default:

		m.rows = removeIndex(m.rows, index)
	}

	m.cursor = clamp(m.cursor, 0, len(m.rows)-1)
	m.RenumberRows()
	m.UpdateViewport()
	return len(m.rows) > 0
}

// SortOrder defines the sort direction for the SortBy method.
type SortOrder bool

const (
	SortAscending  SortOrder = false
	SortDescending SortOrder = true
	SortString               = ""
	SortNumeric              = 0
)

// SortBy sorts the table by column identified by 'index' and
// in the given order.
//
// typeHint hints what data type should be assumed for the column. Pass empty string
// to string-sort, 0 to numerically sort (all numeric types). If the data cannot be cast
// to a numeric type when requested, then it will string sort the displayed data.
func (m *Model) SortBy(index int, order SortOrder, typeHint interface{}) {
	if index < 0 || index >= len(m.Columns()) {
		return
	}

	rows := m.Rows()

	sort.Slice(rows, func(i, j int) bool {
		iData, jData := rows[i].Data[index], rows[j].Data[index]

		var iNumeric, jNumeric float64
		var err1, err2 error
		compareNumeric := false

		switch typeHint.(type) {
		case string:
			break // early
		case int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64, float32, float64:

			iNumeric, err1 = strconv.ParseFloat(iData, 64)
			jNumeric, err2 = strconv.ParseFloat(jData, 64)
			if err1 == nil && err2 == nil {
				compareNumeric = true
			}
		}

		if order == SortAscending {
			if compareNumeric {
				return iNumeric < jNumeric
			} else {
				return iData < jData
			}
		}

		if compareNumeric {
			return iNumeric > jNumeric
		} else {
			return iData > jData
		}
	})

	m.RenumberRows()
	m.UpdateViewport()
}

// Find performs a free text search of the table data for the given string,
// beginning from startRow+1 or cursor+1 whichever is sooner, to the end of the table. Cursor is moved to the
// first match. If no match is found, false is returned.
func (m *Model) Find(text string, startRow int) bool {

	for i := clamp(min(startRow, m.Cursor())+1, 0, len(m.rows)-1); i < len(m.rows); i++ {
		for _, col := range m.rows[i].Data {
			if strings.Contains(col, text) {
				m.SetCursor(i)
				m.UpdateViewport()
				return true
			}
		}
	}
	return false
}

// RenumberRows renumbers the row numbers in column 0, if row numbers were requested in the constructor options.
func (m *Model) RenumberRows() {
	if !m.rowNumbers {
		return
	}

	colWidth := rowNumberColWidth(m.rows)

	for i := 0; i < len(m.rows); i++ {
		m.rows[i].Data[0] = pad(colWidth, i+1) // right justify
	}

	m.UpdateViewport()
}

// GetRowByHash returns the index of the row identified by the given hash value.
// If the row is not found, -1 is returned.
func (m Model) GetRowByHash(hashCode uint64) int {

	for i, r := range m.rows {
		if r.Metadata != nil && r.Metadata.GetHashCode() == hashCode {
			return i
		}
	}

	return -1
}

// GetRow returns the index of the row containing the given object as metadata.
// If the row is not found, -1 is returned.
func (m Model) GetRow(obj Metadata) int {
	return m.GetRowByHash(obj.GetHashCode())
}

func (m *Model) addRowNumbers() {

	// Insert rowNumberColumn as column 0
	colWidth := rowNumberColWidth(m.rows)

	rowNumberColumn := Column{
		Title: pad(colWidth, "#"),
		Width: colWidth + 1,
	}

	m.cols = append([]Column{rowNumberColumn}, m.cols...)

	for i, v := range m.rows {
		m.rows[i].Data = append([]string{pad(colWidth, i+1)}, v.Data...)
	}
}

// rowNumberColWidth calculates the width of the column for row numbers
// based on the number of rows when the table is created.
func rowNumberColWidth(rows []Row) int {
	return int(math.Log10(float64(len(rows)))) + 1
}

// pad is used for justifying the row numbers column
func pad(width int, i interface{}) string {
	var value string

	switch v := i.(type) {
	case string:

		value = v

	case int:

		value = strconv.Itoa(v)

	default:

		panic(fmt.Sprintf("Unsupported type for pad: %T", i))
	}

	if width < 1 {
		return value
	}

	return strings.Repeat(" ", max(width-len(value), 0)) + value
}

func removeIndex[T any](s []T, index int) []T {
	return append(s[:index], s[index+1:]...)
}

// renderTable builds a table from a slice of struct.
// The slice elements must be all the same type.
func renderTable(data interface{}, fields []string) ([]Column, []Row, error) {
	v := reflect.ValueOf(data)
	if v.Kind() != reflect.Slice || v.Len() == 0 {
		return nil, nil, errors.New("invalid or empty data slice")
	}

	elemType := v.Index(0).Type()
	if elemType.Kind() != reflect.Struct {
		return nil, nil, errors.New("data slice must contain structs")
	}

	// Check if the elements implement the Metadata interface
	var metadataInterfaceType = reflect.TypeOf((*Metadata)(nil)).Elem()
	if !elemType.Implements(metadataInterfaceType) {
		return nil, nil, errors.New("elements in the data slice must implement the Metadata interface")
	}

	// Recursive function to get all field names and struct tag values, including embedded structs
	var getFieldNamesWithTags func(reflect.Type) []string
	getFieldNamesWithTags = func(t reflect.Type) []string {
		var result []string
		for i := 0; i < t.NumField(); i++ {
			field := t.Field(i)

			// Skip unexported fields
			if !field.IsExported() {
				continue
			}

			if field.Anonymous {
				embeddedFields := getFieldNamesWithTags(field.Type)
				result = append(result, embeddedFields...)
			} else {
				if tag := field.Tag.Get("xtable"); tag != "" {
					result = append(result, tag) // Use the struct tag's value
				} else {
					result = append(result, field.Name)
				}
			}
		}
		return result
	}

	// Recursive function to find the field index path (for nested structs)
	var getFieldIndices func(reflect.Type, string) ([]int, bool)
	getFieldIndices = func(t reflect.Type, fieldName string) ([]int, bool) {
		for i := 0; i < t.NumField(); i++ {
			field := t.Field(i)

			// Skip unexported fields
			if !field.IsExported() {
				continue
			}

			if field.Anonymous {
				indices, found := getFieldIndices(field.Type, fieldName)
				if found {
					return append([]int{i}, indices...), true
				}
			} else {
				if tag := field.Tag.Get("xtable"); tag == fieldName || (tag == "" && field.Name == fieldName) {
					return []int{i}, true
				}
			}
		}
		return nil, false
	}

	// Safely get the value of a nested field
	getNestedFieldValue := func(v reflect.Value, indices []int) (result reflect.Value) {
		defer func() {
			if r := recover(); r != nil {
				// Ignore unexported or inaccessible fields
				result = reflect.Value{}
			}
		}()

		for _, index := range indices {
			if v.Kind() == reflect.Ptr && !v.IsNil() {
				v = v.Elem() // Dereference pointer
			}
			v = v.Field(index)
		}
		return v
	}

	// Get all struct field names if fields are not provided
	if len(fields) == 0 {
		fields = getFieldNamesWithTags(elemType)
	}

	// Prepare columns and find field indices
	columns := make([]Column, len(fields))
	fieldIndices := make([][]int, len(fields))
	for i, field := range fields {
		indices, found := getFieldIndices(elemType, field)
		if !found {
			return nil, nil, fmt.Errorf("field %s not found in struct", field)
		}
		fieldIndices[i] = indices

		// Determine column title
		fieldStruct := elemType.FieldByIndex(indices)
		columnTitle := fieldStruct.Name
		if tag := fieldStruct.Tag.Get("xtable"); tag != "" {
			columnTitle = tag
		}

		columns[i] = Column{Title: columnTitle, Width: len(columnTitle)}
	}

	// Prepare rows and determine max width for each column
	rows := make([]Row, v.Len())
	for i := 0; i < v.Len(); i++ {
		elem := v.Index(i)

		rdata := make([]string, len(fields))
		for j, indices := range fieldIndices {
			val := getNestedFieldValue(elem, indices)
			valStr := ""
			if val.IsValid() {
				valStr = fmt.Sprintf("%v", val.Interface())
			}
			rdata[j] = valStr
			if len(valStr) > columns[j].Width {
				columns[j].Width = len(valStr)
			}
		}

		x := elem.Interface().(Metadata) // Assert metadata interface
		rows[i] = Row{Data: rdata, Metadata: x}
	}

	return columns, rows, nil
}
